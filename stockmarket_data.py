# -*- coding: utf-8 -*-
"""stockmarket_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-H1OZMJCkXR_MbYKMWYJZwHEc6aO8IsG
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

stockmarket_data=pd.read_excel('/content/drive/MyDrive/stockmarket_data.xlsx',parse_dates=["Date"])
stockmarket_data

stockmarket_data.info()

stockmarket_data.describe()

stockmarket_data.head(10)

stockmarket_data.tail(5)

stockmarket_data.isnull().sum()

stockmarket_data.shape

# importing packages
import seaborn as sns
import matplotlib.pyplot as plt


fig, axes = plt.subplots(2, 2, figsize=(10,10))

axes[0,0].set_title("Open")
axes[0,0].hist(stockmarket_data['Open'], bins=7)

axes[0,1].set_title("High")
axes[0,1].hist(stockmarket_data['High'], bins=5);

axes[1,0].set_title("Low")
axes[1,0].hist(stockmarket_data['Low'], bins=6);

axes[1,1].set_title("Adj Close")
axes[1,1].hist(stockmarket_data['Adj Close**'], bins=6);

correlation_matrix = stockmarket_data.select_dtypes(include=['number']).corr(method='pearson').drop(
    ['Date'], axis=1, errors='ignore').drop(['Date'], axis=0, errors='ignore')

sns.heatmap(correlation_matrix, annot=True)
plt.show()

stockmarket_data['Volume'].max()

#plotting the distrbution of Volume
plt.figure(figsize=(16,10))
plt.hist(stockmarket_data['Volume'], density=True, bins=200)
plt.title("Distribution of Volume")
plt.xlabel("Volume")
plt.ylabel("Frequency")
#plt.xlim(stockmarket_data['Volume'].min,stockmarket_data['Volume'].max)
plt.show()

trading_days = stockmarket_data['Date']
fig, ax = plt.subplots(figsize=(16,10))
ax.plot(trading_days,stockmarket_data['Close*'],label="Closing Price",color='#3499db')
ax.plot(trading_days,stockmarket_data['High'],label="High Price",color='#e67e22')
ax.plot(trading_days,stockmarket_data['Open'],label="Opening Price",color='#95a5a6')
ax.set_title(" Stock Prices with Indicators", fontsize="14", fontweight="semibold")
trading_days = stockmarket_data.index  # If your DataFrame's index is set to dates
#ax.set_xlim([stockmarket_data.min(), stockmarket_data.max()])
plt.legend()

X=stockmarket_data.drop(['Date','Close*'],axis=1)
Y=stockmarket_data['Close*']

print(X)

print(Y)

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=1)

print(X_train)

print(X_test)

print(Y_train)

print(Y_test)

"""Linear Regression ALGM"""

from sklearn.linear_model import LinearRegression
stockmarket_lr=LinearRegression()
stockmarket_lr.fit(X_train,Y_train)

X_test_pred=stockmarket_lr.predict(X_test)
print(X_test_pred)

from sklearn.metrics import mean_squared_error

mse=mean_squared_error(Y_test,X_test_pred)
print("mse",{mse})

rmse=np.sqrt(mse)
print("rmse",{rmse})

"""**PLOTTING A GRAPH USING MSE AND RMSE**"""

# Plot Predictions vs Actual values
plt.figure(figsize=(8, 6))
plt.scatter(Y_test, X_test_pred, color='blue', label='Predicted vs Actual')
plt.plot([min(Y_test), max(Y_test)], [min(Y_test), max(Y_test)], color='red', label='Ideal Fit Line')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Predicted vs Actual Values')
plt.legend()
plt.grid(True)
plt.show()

